generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Halls {
  id          Int          @id @default(autoincrement())
  hallName    String
  hallAddress hallAddress?
  screen      Screens[]
  Movies      Movie[]
  showTime    ShowTime[]
  Booking     Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model hallAddress {
  id         Int     @id @default(autoincrement())
  street     String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  hallId     String?
  hall       Halls?  @relation(fields: [id], references: [id])

  @@unique([id])
}

model ShowTime {
  id Int @id @default(autoincrement())

  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id])

  hallId Int
  hall   Halls @relation(fields: [hallId], references: [id])

  screenId Int
  screen   Screens @relation(fields: [screenId], references: [id])

  showTime DateTime
  Booking  Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Screens {
  id           Int        @id @default(autoincrement())
  screenNumber Int
  capacity     Int
  hallId       Int
  hall         Halls      @relation(fields: [hallId], references: [id])
  Movies       Movie[]
  Seats        Seat[]
  ShowTime     ShowTime[]
  Booking      Booking[]
}

model Seat {
  id         Int     @id @default(autoincrement())
  seatNumber Int     @unique
  available  Boolean

  screenId Int
  screen   Screens @relation(fields: [screenId], references: [id])

  Booking Booking[]
}

model Movie {
  id          Int      @id @default(autoincrement())
  movieName   String
  Description String
  Duration    Int
  Rating      Float
  Image       String
  Genre       String
  ReleaseDate DateTime
  screenId    Int
  screen      Screens  @relation(fields: [screenId], references: [id])

  hallId Int
  hall   Halls @relation(fields: [hallId], references: [id])

  ShowTime ShowTime[]
  Booking  Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String?
  email       String?   @unique
  phoneNumber String    @unique
  password    String
  Address     Address?
  Booking     Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  UserId     String?
  user       User?   @relation(fields: [UserId], references: [id])

  @@unique([UserId])
}

model Booking {
  id Int @id @default(autoincrement())

  hallId Int
  hall   Halls @relation(fields: [hallId], references: [id])

  screenId Int
  Screen   Screens @relation(fields: [screenId], references: [id])

  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id])

  showTimeId Int
  showTime   ShowTime @relation(fields: [showTimeId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  seatId Int
  seat   Seat @relation(fields: [seatId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
